import java.util.regex.Pattern

apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.0'
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 19
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
//            signingConfig signingConfigs.release
        }
        debug {

        }
    }
    signingConfigs {
        release
    }
}

dependencies {
    // You must install or update the Support Repository through the SDK manager to use this dependency.
    // The Support Repository (separate from the corresponding library) can be found in the Extras category.
    // compile 'com.android.support:support-v4:18.0.0'
}


/*
def Properties props = new Properties()
def propFile = new File("signing.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props!= null
            && props.containsKey("KEYSTORE_FILE")
            && props.containsKey("KEYSTORE_PASSWORD")
            && props.containsKey("KEY_ALIAS")
            && props.containsKey("KEY_PASSWORD")) {

        def keystoreFile = new File(props["KEYSTORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = keystoreFile
            android.signingConfigs.release.storePassword = props["KEYSTORE_PASSWORD"]
            android.signingConfigs.release.keyAlias = props["KEY_ALIAS"]
            android.signingConfigs.release.keyPassword = props["KEY_PASSWORD"]
        }
        else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    }
    else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found")
    android.buildTypes.release.signingConfig = null
}

*/


task ('incrementVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    println(":incrementVersionCode - " + mVersionCode + " -> " + mNextVersionCode);
    manifestFile.write(manifestContent)
}

task ('incrementVersionName') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def mVersionName = majorVersion + "." + minorVersion
    def mNextVersionName = majorVersion + "." + (minorVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    println(":incrementVersionName - " + mVersionName + " -> " + mNextVersionName)
    manifestFile.write(manifestContent)
}


assembleDebug.dependsOn incrementVersionCode

assembleRelease.dependsOn incrementVersionCode
assembleRelease.dependsOn incrementVersionName

incrementVersionName.mustRunAfter build
incrementVersionCode.mustRunAfter build

